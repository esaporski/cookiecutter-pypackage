{%- set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD-3-Clause': 'License :: OSI Approved :: BSD License',
    'ISC': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache-2.0': 'License :: OSI Approved :: Apache Software License',
    'GPL-3.0-or-later': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} %}

{%- if cookiecutter.use_poetry == 'y' %}[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
authors = ["{{ cookiecutter.full_name }} <{{ cookiecutter.email }}>"]
readme = "README.rst"
packages = [{include = "{{ cookiecutter.project_slug }}"}]
# Identifiers are listed at the SPDX Open Source License Registry (https://spdx.org/licenses/).
# If your project is proprietary and does not use a specific licence,
# you can set this value as 'Proprietary'.
license = "{{ cookiecutter.project_license }}"
keywords = ['{{ cookiecutter.project_slug }}',]
classifiers = [
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
{%- if cookiecutter.project_license in license_classifiers %}
    '{{ license_classifiers[cookiecutter.project_license] }}',
{%- endif %}
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
]

[tool.poetry.dependencies]
python = "^3.9"

[tool.poetry.group.dev.dependencies]
{% if cookiecutter.use_black == 'y' -%}
black = "^22.12.0"{% endif %}
{% if cookiecutter.command_line_interface|lower == 'click' -%}
click = "^8.1.3"{% endif %}
commitizen = "^2.39.1"
coverage = {extras = ["toml"], version = "^7.0.2"}
Jinja2 = "^3.1.2"
pre-commit = "^2.21.0"
{% if cookiecutter.use_pytest == 'y' -%}
pytest = "^7.2.0"{% endif %}
ruff = "^0.0.264"
Sphinx = "^6.0.0"
tox = "^4.1.3"
watchdog = "^2.2.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
{%- else %}
[tool.distutils.bdist_wheel]
universal = true
{%- endif %}

[tool.commitizen]
name = "cz_conventional_commits"
version = "{{ cookiecutter.version }}"
version_files = [
    "pyproject.toml:version",
    "{{ cookiecutter.project_slug }}/__init__.py",
    "sonar-project.properties:sonar.projectVersion",
]
bump_message = "release: version $current_version â†’ $new_version"

[tool.coverage.run]
# Store relative file paths in the data file
relative_files = true
# A list of packages or directories, the source to measure during execution
source = ["tests", "{{ cookiecutter.project_slug }}"]
# Whether to measure branch coverage in addition to statement coverage
branch = true
# The command-line to run your program
command_line = "-m pytest"

[tool.coverage.xml]
output = "reports/coverage.xml"

{%- if cookiecutter.use_pytest == 'y' %}
[tool.pytest.ini_options]
minversion = "6.0"
junit_family = "xunit2"
addopts = "-ra --verbose --junit-xml=reports/pytest.xml"
testpaths = [
    "tests",
]
collect_ignore = [
    "setup.py",
]
{%- endif %}

[tool.black]
check = true
verbose = true
line-length = 88
# Excludes files or directories in addition to the defaults
extend-exclude = '''
(
  docs
  venv
  |.eggs
  |.tox
)
'''

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = True
envlist = py39,py310

[testenv]
setenv =
    PYTHONPATH = {toxinidir}
{% if cookiecutter.use_pytest == 'y' -%}
deps =
    -r{toxinidir}/requirements_dev.txt
commands =
    pip install -U pip
    pytest --basetemp={envtmpdir}
{% else %}
commands = python setup.py test
{%- endif %}
[coverage:run]
relative_files = True
source = tests,{{ cookiecutter.project_slug }}
branch = True
"""

[tool.ruff]
select = ["ALL"]
ignore = [
    "D211", # no-blank-line-before-class
    "D212", # multi-line-summary-first-line
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = []
unfixable = []

# Exclude a variety of commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "docs",
    "node_modules",
    "venv",
]
per-file-ignores = {}

# Same as Black
line-length = 88
