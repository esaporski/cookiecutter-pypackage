{%- if cookiecutter.use_poetry == 'y' %}
[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
authors = ["{{ cookiecutter.full_name }} <{{ cookiecutter.email }}>"]
readme = "README.md"
packages = [{include = "{{ cookiecutter.project_slug }}"}]

# Identifiers are listed at the SPDX Open Source License Registry (https://spdx.org/licenses/).
# If your project is proprietary and does not use a specific licence,
# you can set this value as 'Proprietary'.
license = "{{ cookiecutter.project_license }}"

[tool.poetry.dependencies]
python = "^3.10"

[tool.poetry.group.dev.dependencies]
black = "^22.12.0"
bump2version = "^1.0.1"
click = "^8.1.3"
coverage = "^7.0.2"
flake8 = "^6.0.0"
flake8-black = "^0.3.6"
Jinja2 = "^3.1.2"
pytest = "^7.2.0"
Sphinx = "^6.0.0"
tox = "^4.1.3"
watchdog = "^2.2.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
{%- else %}
[tool.distutils.bdist_wheel]
universal = true
{%- endif %}

[tool.coverage.run]
# Store relative file paths in the data file
relative_files = true
# A list of packages or directories, the source to measure during execution
source = ["tests", "{{ cookiecutter.project_slug }}"]
# Whether to measure branch coverage in addition to statement coverage
branch = true
# The command-line to run your program
command_line = "-m pytest"

[tool.coverage.xml]
output = "reports/coverage.xml"

{%- if cookiecutter.use_pytest == 'y' %}
[tool.pytest.ini_options]
minversion = "6.0"
junit_family = "xunit2"
addopts = "-ra --verbose --junit-xml=reports/pytest.xml"
testpaths = [
    "tests",
]
collect_ignore = [
    "setup.py",
]
{%- endif %}

[tool.black]
check = true
verbose = true
line-length = 88
# Excludes files or directories in addition to the defaults
extend-exclude = '''
(
  docs
  venv
  |.eggs
  |.tox
)
'''

[tool.isort]
profile = "black"
skip_gitignore = true
extend_skip = ["docs", "venv", ".eggs", ".tox", "__pycache__"]
src_paths = ["{{ cookiecutter.project_slug }}", "tests"]

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = True
envlist = py39,py310

[testenv]
setenv =
    PYTHONPATH = {toxinidir}
{% if cookiecutter.use_pytest == 'y' -%}
deps =
    -r{toxinidir}/requirements_dev.txt
commands =
    pip install -U pip
    pytest --basetemp={envtmpdir}
{% else %}
commands = python setup.py test
{%- endif %}

[coverage:run]
relative_files = True
source = tests,{{ cookiecutter.project_slug }}
branch = True
"""
